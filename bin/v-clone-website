#!/bin/bash
# info: add firewall ipset
# options: SOURCE_DOMAIN TARGET_DOMAIN
#
# example: v-clone-website example.com example.org
#
# Migration tool that will copy the whole site from one (sub)domain to another (sub)domain (on the same server), changing URLs in the database, taking into account serialized arrays.
# Useful for making a website staging copy in one command-line.
# It automatically detects WordPress, reading the DB user, DB name, DB pass, and cloning to a new database, with the corresponding wp-config.php file update during the process.

if [ $# -lt 2 ]; then
	echo "USAGE: v-clone-website SOURCE_DOMAIN TARGET_DOMAIN"
	echo "Available parameters:"
	echo ""
	echo "--SOURCE_DB_NAME=...      source database name" 
	echo "--SOURCE_DB_USERNAME=...  source database username"
	echo "--SOURCE_DB_PASSWORD=...  source database password"
	echo "--TARGET_USER=...         target user"
	echo "--TARGET_DB_NAME=...      target database name"
	echo "--TARGET_DB_USERNAME=...  target database username"
	echo "--TARGET_DB_PASSWORD=...  target database password"
	echo "--TARGET_DATABASE=...     overrides --TARGET_DB_NAME and --TARGET_DB_USERNAME"
	echo "--SITE_SUBDIR=...         location of the site base dir inside public_html/"
	echo "--CONFIG_FILE=...         location of the site config file"
	exit 1
fi

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Argument definition
SOURCE_DOMAIN=$1
TARGET_DOMAIN=$2

# Importing system environment
source /etc/profile

# Includes
# shellcheck source=/etc/hestiacp/hestia.conf
source /etc/hestiacp/hestia.conf
# shellcheck source=/usr/local/hestia/func/main.sh
source $HESTIA/func/main.sh
# shellcheck source=/usr/local/hestia/func/db.sh
source $HESTIA/func/db.sh
# load config file
source_conf "$HESTIA/conf/hestia.conf"

# Make sure we start fresh
SOURCE_DB_NAME=''
SOURCE_DB_USERNAME=''
SOURCE_DB_PASSWORD=''
SOURCE_CONFIG_FILE=''
TARGET_DB_NAME=''
TARGET_DB_USERNAME=''
TARGET_DB_PASSWORD=''
SITE_SUBDIR=''
SEARCH_FOR_CONFIGS_DB_NAME=''
SEARCH_FOR_CONFIGS_DB_USERNAME=''

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

is_domain_format_valid "$SOURCE_DOMAIN"
is_domain_format_valid "$TARGET_DOMAIN"

# Bail early if SOURCE_DOMAIN doesn't exist
user=$($HESTIA/bin/v-search-domain-owner "$SOURCE_DOMAIN")
if [ -z "$user" ]; then
	echo "Error: domain $SOURCE_DOMAIN does not exist"
	exit 2
fi

SOURCE_USER=$user

# Grab SOURCE_DOMAIN info
#
# bin/v-get-site-info provides the following info:
#
# SITE_USER='user'
# SITE_DIR='/home/user/web/example.com/public_html'
# SITE_SUBDIR=''
# SITE_HAS_SSL='1'
# CMS_TYPE='wordpress'
# CONFIG_FILE='wp-config.php'
# CONFIG_FILE_FULL_PATH='/home/user/web/example.com/public_html/wp-config.php'
# DB_HOSTNAME='localhost'
# DB_NAME='user_dbname'
# DB_USERNAME='user_dbuser'
# DB_PASSWORD='passW0rd'
# DB_NAME_WITHOUT_USER_PREFIX='dbname'
# DB_USERNAME_WITHOUT_USER_PREFIX='dbuser'

if [ -z "$SITE_SUBDIR" ]; then
	r=$($HESTIA/bin/v-get-site-info "$SOURCE_DOMAIN")
else
	r=$($HESTIA/bin/v-get-site-info "$SOURCE_DOMAIN" "$SITE_SUBDIR")
fi

eval $r

SOURCE_DIR=$SITE_DIR

if [ ! -z "$CONFIG_FILE" ]; then
	SOURCE_CONFIG_FILE=$CONFIG_FILE
fi
if [ ! -z "$SOURCE_CONFIG_FILE" ]; then
	SOURCE_CONFIG_FILE_FULL_PATH="$SOURCE_DIR/$SOURCE_CONFIG_FILE"
fi

if [ ! -z "$CONFIG_FILE_FULL_PATH" ]; then
	SOURCE_CONFIG_FILE_FULL_PATH=$CONFIG_FILE_FULL_PATH
fi

if [ ! -f "$SOURCE_CONFIG_FILE_FULL_PATH" ]; then
	echo "Error: SOURCE_CONFIG_FILE_FULL_PATH $SOURCE_CONFIG_FILE_FULL_PATH does not exist"
	exit 3
fi

WORDPRESS_DETECTED=0
if [ "$CMS_TYPE" = "wordpress" ]; then
	WORDPRESS_DETECTED=1
fi

if [ -z "$SOURCE_DB_NAME" ]; then
	SOURCE_DB_NAME=$DATABASE_NAME
fi

if [ -z "$SOURCE_DB_USERNAME" ]; then
	SOURCE_DB_USERNAME=$DATABASE_USERNAME
fi

if [ -z "$SOURCE_DB_PASSWORD" ]; then
	SOURCE_DB_PASSWORD=$DATABASE_PASSWORD
fi

if [ -z "$SOURCE_DB_NAME" ]; then
	echo "Error: SOURCE_DB_NAME is empty"
	exit 4
fi
if [ -z "$SOURCE_DB_USERNAME" ]; then
	echo "Error: SOURCE_DB_USERNAME is empty"
	exit 5
fi
if [ -z "$SOURCE_DB_PASSWORD" ]; then
	echo "Error: SOURCE_DB_PASSWORD is empty"
	exit 6
fi

DB_exist=$(check_if_database_exists "$user" "$SOURCE_DB_NAME")
if [ "$DB_exist" = "no" ]; then
	echo "Error: database $SOURCE_DB_NAME does not exist"
	exit 7
fi

SOURCE_DB_NAME_WITHOUT_PREFIX=$(get_database_name_without_user_prefix "$SOURCE_USER" "$SOURCE_DB_NAME")
SOURCE_DB_USERNAME_WITHOUT_PREFIX=$(get_database_name_without_user_prefix "$SOURCE_USER" "$SOURCE_DB_USERNAME")

SOURCE_DOMAIN_HAS_SSL=0
if [ -f "/home/$SOURCE_USER/conf/web/$SOURCE_DOMAIN/ssl/$SOURCE_DOMAIN.ca" ]; then
	SOURCE_DOMAIN_HAS_SSL=1
fi

SOURCE_DOMAIN_TPL=$($HESTIA/bin/v-list-web-domain "$SOURCE_USER" "$SOURCE_DOMAIN" | grep 'TEMPLATE:' | awk '{print $2}')
SOURCE_DOMAIN_PROXY_TPL=$($HESTIA/bin/v-list-web-domain "$SOURCE_USER" "$SOURCE_DOMAIN" | grep 'PROXY:' | awk '{print $2}')
SOURCE_DOMAIN_PROXY_EXT=$($HESTIA/bin/v-list-web-domain "$SOURCE_USER" "$SOURCE_DOMAIN" | grep 'PROXY EXT:' | cut -d ' ' -f8- | sed "s# #,#g")

# ----------- TO -------------

CREATE_TARGET_USER=0
CREATE_TARGET_DOMAIN=0

if [ -z "$TARGET_USER" ]; then
	TARGET_USER=$($HESTIA/bin/v-search-domain-owner "$TARGET_DOMAIN")
	if [ -z "$TARGET_USER" ]; then
		TARGET_USER=$SOURCE_USER
		CREATE_TARGET_DOMAIN=1
	fi
else
	if [ ! -d "/home/$TARGET_USER" ]; then
		CREATE_TARGET_USER=1
	fi
	if [ ! -d "/home/$TARGET_USER/web/$TARGET_DOMAIN/public_html" ]; then
		CREATE_TARGET_DOMAIN=1
	fi
fi

TARGET_DIR="/home/$TARGET_USER/web/$TARGET_DOMAIN/public_html"
CHECK_PUBLIC_SHTML=$($HESTIA/bin/v-list-web-domain "$TARGET_USER" "$TARGET_DOMAIN" | grep 'SSL:' | grep -c 'single')
if [ $CHECK_PUBLIC_SHTML -eq 1 ]; then
	TARGET_DIR="/home/$TARGET_USER/web/$TARGET_DOMAIN/public_shtml"
fi
if [ ! -z "$SITE_SUBDIR" ]; then
	TARGET_DIR="$TARGET_DIR/$SITE_SUBDIR"
fi

TARGET_CONFIG_FILE_FULL_PATH="$TARGET_DIR/$SOURCE_CONFIG_FILE"

TARGET_DB_NAME=$(echo "$TARGET_DOMAIN" | sed 's#\.#_#g' | rev | cut -d '_' -f 2- | rev)
TARGET_DB_NAME="${TARGET_USER}_$TARGET_DB_NAME"
TARGET_DB_USERNAME=$TARGET_DB_NAME

if [ ! -z "$TARGET_DATABASE" ]; then
	TARGET_DB_USERNAME=$TARGET_DATABASE
	TARGET_DB_NAME=$TARGET_DATABASE
fi
if [ -z "$TARGET_DB_PASSWORD" ]; then
	TARGET_DB_PASSWORD=$SOURCE_DB_PASSWORD
fi
if [ -z "$TARGET_DB_NAME" ]; then
	echo "Error: TARGET_DB_NAME $TARGET_DB_NAME is empty"
	exit 10
fi
if [ -z "$TARGET_DB_USERNAME" ]; then
	echo "Error: TARGET_DB_USERNAME $TARGET_DB_USERNAME is empty"
	exit 11
fi
if [ -z "$TARGET_DB_PASSWORD" ]; then
	echo "Error: TARGET_DB_PASSWORD $TARGET_DB_PASSWORD is empty"
	exit 12
fi

TARGET_DB_NAME_WITHOUT_PREFIX=$(get_database_name_without_user_prefix "$TARGET_USER" "$TARGET_DB_NAME")
TARGET_DB_USERNAME_WITHOUT_PREFIX=$(get_database_name_without_user_prefix "$TARGET_USER" "$TARGET_DB_USERNAME")

TARGET_DOMAIN_HAS_SSL=0
if [ -f "/home/$TARGET_USER/conf/web/$TARGET_DOMAIN/ssl/$TARGET_DOMAIN.ca" ]; then
	TARGET_DOMAIN_HAS_SSL=1
fi
SHOULD_INSTALL_SSL=0
if [ $SOURCE_DOMAIN_HAS_SSL -eq 1 ] && [ $TARGET_DOMAIN_HAS_SSL -eq 0 ]; then
	SHOULD_INSTALL_SSL=1
fi

SOURCE_FPM_VER=""
if [[ $SOURCE_DOMAIN_TPL == "PHP-FPM-"* ]]; then
	SOURCE_FPM_TPL_VER=${SOURCE_DOMAIN_TPL:8:2}
	SOURCE_FPM_VER="${SOURCE_DOMAIN_TPL:8:1}.${SOURCE_DOMAIN_TPL:9:1}"
fi

# ----------- CHECK -------------

if [ $WORDPRESS_DETECTED -eq 0 ]; then
	if [ ! -f "/root/Search-Replace-DB/srdb.cli.php" ]; then
		if [ ! -f "/usr/bin/git" ]; then
			apt-get update > /dev/null 2>&1
			apt-get -y install git > /dev/null 2>&1
		fi
		cd /root
		git clone https://github.com/interconnectit/Search-Replace-DB.git
	fi
else
	if [ ! -f "/usr/local/bin/wp" ]; then
		echo "=== Downloading latest wp-cli"
		wget -nv https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -O /usr/local/bin/wp
		chmod +x /usr/local/bin/wp
	fi
fi

# Verify target database doesn't exist
CREATE_TARGET_DATABASE=0
object=$(grep "DB='$TARGET_DB_NAME'" $HESTIA/data/users/$TARGET_USER/db.conf)
if [ -z "$object" ]; then
	CREATE_TARGET_DATABASE=1
fi

# ----------- PRINT -------------

echo "SOURCE:"
echo "==============================================================================="
echo "SOURCE_DOMAIN                     = $SOURCE_DOMAIN"
echo "SOURCE_USER                       = $SOURCE_USER"
echo "SOURCE_DIR                     = $SOURCE_DIR"
echo "SOURCE_CONFIG_FILE_FULL_PATH      = $SOURCE_CONFIG_FILE_FULL_PATH"
echo "SOURCE_DB_NAME                    = $SOURCE_DB_NAME"
echo "SOURCE_DB_USERNAME                = $SOURCE_DB_USERNAME"
echo "SOURCE_DB_PASSWORD                = $SOURCE_DB_PASSWORD"
echo "SOURCE_DB_NAME_WITHOUT_PREFIX     = $SOURCE_DB_NAME_WITHOUT_PREFIX"
echo "SOURCE_DB_USERNAME_WITHOUT_PREFIX = $SOURCE_DB_USERNAME_WITHOUT_PREFIX"
echo "SOURCE_DOMAIN_TPL                 = $SOURCE_DOMAIN_TPL"
echo "SOURCE_FPM_VER                    = $SOURCE_FPM_VER"
echo "SOURCE_DOMAIN_PROXY_TPL           = $SOURCE_DOMAIN_PROXY_TPL"
echo "SOURCE_DOMAIN_PROXY_EXT           = $SOURCE_DOMAIN_PROXY_EXT"
echo ""
echo "TARGET:"
echo "==============================================================================="
echo "TARGET_DOMAIN                     = $TARGET_DOMAIN"
echo "TARGET_USER                       = $TARGET_USER"
echo "TARGET_DIR                     = $TARGET_DIR"
echo "TARGET_CONFIG_FILE_FULL_PATH      = $TARGET_CONFIG_FILE_FULL_PATH"
echo "TARGET_DB_NAME                    = $TARGET_DB_NAME"
echo "TARGET_DB_USERNAME                = $TARGET_DB_USERNAME"
echo "TARGET_DB_PASSWORD                = $TARGET_DB_PASSWORD"
echo "TARGET_DB_NAME_WITHOUT_PREFIX     = $TARGET_DB_NAME_WITHOUT_PREFIX"
echo "TARGET_DB_USERNAME_WITHOUT_PREFIX = $TARGET_DB_USERNAME_WITHOUT_PREFIX"
echo "CREATE_TARGET_USER                = $CREATE_TARGET_USER"
echo "CREATE_TARGET_DOMAIN              = $CREATE_TARGET_DOMAIN"
echo "CREATE_TARGET_DATABASE            = $CREATE_TARGET_DATABASE"
echo ""
echo "OTHERS:"
echo "==============================================================================="
echo "SITE_SUBDIR                       = $SITE_SUBDIR"
echo "CMS_TYPE                          = $CMS_TYPE"
echo "WORDPRESS_DETECTED                = $WORDPRESS_DETECTED"
echo "CONFIG_FILE                       = $CONFIG_FILE"
echo "SHOULD_INSTALL_SSL                = $SHOULD_INSTALL_SSL"
echo "SEARCH_FOR_CONFIGS_DB_NAME        = $SEARCH_FOR_CONFIGS_DB_NAME"
echo "SEARCH_FOR_CONFIGS_DB_USERNAME    = $SEARCH_FOR_CONFIGS_DB_USERNAME"
echo ""
read -p "=== Press Enter to continue ==="

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

if [ $CREATE_TARGET_USER -eq 1 ]; then
	pass=$(generate_password)
	echo "=== Create user $TARGET_USER, pass=$pass"
	$HESTIA/bin/v-add-user "$TARGET_USER" "$pass" "info@$TARGET_DOMAIN" "default" "Cloned" "site"
fi

if [ $CREATE_TARGET_DOMAIN -eq 1 ]; then
	echo "=== Create domain $TARGET_DOMAIN"
	$HESTIA/bin/v-add-domain "$TARGET_USER" "$TARGET_DOMAIN"
	rm $TARGET_DIR/index.html
fi

if [ $SHOULD_INSTALL_SSL -eq 1 ]; then
	echo "=== Installing LetsEncrypt for domain $TARGET_DOMAIN"
	$HESTIA/bin/v-add-letsencrypt-domain "$TARGET_USER" "$TARGET_DOMAIN" "www.$TARGET_DOMAIN" "yes"
	if [ $? -ne 0 ]; then
		echo "=== LetsEncrypt installation failed"
	fi
fi

if [ ! -z "$SOURCE_DOMAIN_TPL" ]; then
	echo "=== Set $SOURCE_DOMAIN_TPL template to domain $TARGET_DOMAIN"
	$HESTIA/bin/v-change-web-domain-tpl "$TARGET_USER" "$TARGET_DOMAIN" "$SOURCE_DOMAIN_TPL" "yes"
fi

if [ "$SITE_SUBDIR" = ".." ]; then
	if [ ! -z "$SOURCE_FPM_VER" ]; then
		POOLD_FILE="/etc/php/$SOURCE_FPM_VER/fpm/pool.d/$TARGET_DOMAIN.conf"
		echo "=== Removing public_html from open_basedir in $POOLD_FILE"
		sed -i "s|/public_html:|:|g" $POOLD_FILE
		sed -i "s|/public_shtml:|:|g" $POOLD_FILE
		systemctl restart php${SOURCE_FPM_VER}-fpm
	fi
fi

if [ ! -z "$SOURCE_DOMAIN_PROXY_TPL" ]; then
	echo "=== Set $SOURCE_DOMAIN_PROXY_TPL proxy template to domain $TARGET_DOMAIN"
	$HESTIA/bin/v-change-web-domain-proxy-tpl "$TARGET_USER" "$TARGET_DOMAIN" "$SOURCE_DOMAIN_PROXY_TPL" "$SOURCE_DOMAIN_PROXY_EXT" "yes"
fi

if [ $CREATE_TARGET_DATABASE -eq 1 ]; then
	echo "=== Create database $TARGET_DB_NAME"
	$HESTIA/bin/v-add-database "$TARGET_USER" "$TARGET_DB_NAME_WITHOUT_PREFIX" "$TARGET_DB_USERNAME_WITHOUT_PREFIX" "$TARGET_DB_PASSWORD" 'mysql' 'localhost' 'utf8'
fi

echo "=== Dumping database $SOURCE_DB_NAME"
if [ -d "/root/temp" ]; then
	rm -rf /root/temp
fi
mkdir -p /root/temp
cd /root/temp
mysqldump $SOURCE_DB_NAME > $SOURCE_DB_NAME.sql
echo "=== Importing to database $TARGET_DB_NAME"
mysql $TARGET_DB_NAME < $SOURCE_DB_NAME.sql

echo "=== Copying files from $SOURCE_DIR to folder $TARGET_DIR"
if [ "$SITE_SUBDIR" != ".." ]; then
	echo "====== Executing: rsync -a --delete $SOURCE_DIR/ $TARGET_DIR/"
	rsync -a --delete $SOURCE_DIR/ $TARGET_DIR/
else
	echo "====== Executing: rsync -a --delete --exclude 'logs/*' $SOURCE_DIR/ $TARGET_DIR/"
	rsync -a --delete --exclude 'logs/*' $SOURCE_DIR/ $TARGET_DIR/
fi
echo "=== Chowning to $TARGET_USER:$TARGET_USER in folder $TARGET_DIR"
chown -R $TARGET_USER:$TARGET_USER $TARGET_DIR

replace_php_config_value "${SOURCE_DB_NAME}" "${TARGET_DB_NAME}" "$TARGET_CONFIG_FILE_FULL_PATH" "yes"
replace_php_config_value "${SOURCE_DB_USERNAME}" "${TARGET_DB_USERNAME}" "$TARGET_CONFIG_FILE_FULL_PATH" "yes"
replace_php_config_value "${SOURCE_DB_PASSWORD}" "${TARGET_DB_PASSWORD}" "$TARGET_CONFIG_FILE_FULL_PATH" "yes"

echo "=== Replacing $SOURCE_DOMAIN to $TARGET_DOMAIN by searching in folder $TARGET_DIR"
REGEXP_SOURCE_DOMAIN="${SOURCE_DOMAIN//\./\\.}"
grep -rl "$REGEXP_SOURCE_DOMAIN" $TARGET_DIR | xargs sed -i "s#$REGEXP_SOURCE_DOMAIN#$TARGET_DOMAIN#g"
if [ "$SOURCE_USER" != "$TARGET_USER" ]; then
	echo "=== Replacing /home/$SOURCE_USER/ to /home/$TARGET_USER/ by searching in folder $TARGET_DIR"
	grep -rl "/home/$SOURCE_USER/" $TARGET_DIR | xargs sed -i "s#/home/$SOURCE_USER/#/home/$TARGET_USER/#g"
fi
if [ ! -z "$SEARCH_FOR_CONFIGS_DB_NAME" ]; then
	echo "=== Replacing ${SOURCE_DB_NAME} to ${TARGET_DB_NAME} by searching in folder $TARGET_DIR [SEARCH_FOR_CONFIGS_DB_NAME]"
	grep -rl "${SOURCE_DB_NAME}" $TARGET_DIR | xargs sed -i "s#${SOURCE_DB_NAME}#${TARGET_DB_NAME}#g"
fi
if [ ! -z "$SEARCH_FOR_CONFIGS_DB_USERNAME" ]; then
	DO_SEARCH_FOR_CONFIGS_DB_USERNAME=1;
	if [ ! -z "$SEARCH_FOR_CONFIGS_DB_NAME" ] && [ "$SEARCH_FOR_CONFIGS_DB_NAME" = "$SEARCH_FOR_CONFIGS_DB_USERNAME" ]; then
		DO_SEARCH_FOR_CONFIGS_DB_USERNAME=0
	fi
	if [ $DO_SEARCH_FOR_CONFIGS_DB_USERNAME -eq 1 ]; then
		echo "=== Replacing ${SOURCE_DB_USERNAME} to ${TARGET_DB_USERNAME} by searching in folder $TARGET_DIR [SEARCH_FOR_CONFIGS_DB_USERNAME]"
		grep -rl "${SOURCE_DB_USERNAME}" $TARGET_DIR | xargs sed -i "s#${SOURCE_DB_USERNAME}#${TARGET_DB_USERNAME}#g"
	fi
fi

if [ $WORDPRESS_DETECTED -eq 0 ]; then
	echo "=== Replacing $SOURCE_DOMAIN to $TARGET_DOMAIN in database $TARGET_DB_NAME"
	php /root/Search-Replace-DB/srdb.cli.php -h localhost -n "$TARGET_DB_NAME" -u "$TARGET_DB_USERNAME" -p "$TARGET_DB_PASSWORD" -s "$SOURCE_DOMAIN" -r "$TARGET_DOMAIN"
	if [ "$SOURCE_USER" != "$TARGET_USER" ]; then
		echo "=== Replacing /home/$SOURCE_USER/ to /home/$TARGET_USER/ in database $TARGET_DB_NAME"
		php /root/Search-Replace-DB/srdb.cli.php -h localhost -n "$TARGET_DB_NAME" -u "$TARGET_DB_USERNAME" -p "$TARGET_DB_PASSWORD" -s "/home/$SOURCE_USER/" -r "/home/$TARGET_USER/"
	fi
else
	cd $TARGET_DIR
	echo "=== Replacing $SOURCE_DOMAIN to $TARGET_DOMAIN in database $TARGET_DB_NAME"
	sudo -H -u$TARGET_USER wp search-replace "$SOURCE_DOMAIN" "$TARGET_DOMAIN" --precise --all-tables --skip-columns=guid
	if [ "$SOURCE_USER" != "$TARGET_USER" ]; then
		echo "=== Replacing /home/$SOURCE_USER/ to /home/$TARGET_USER/ in database $TARGET_DB_NAME"
		sudo -H -u$TARGET_USER wp search-replace "/home/$SOURCE_USER/" "/home/$TARGET_USER/" --precise --all-tables --skip-columns=guid
	fi
	sudo -H -u$TARGET_USER wp cache flush
	sudo -H -u$TARGET_USER wp config shuffle-salts WP_CACHE_KEY_SALT --force
	sudo -H -u$TARGET_USER wp config shuffle-salts
fi

echo "===== DONE ===="
echo "You can visit http://$TARGET_DOMAIN/"

#----------------------------------------------------------#
#                       Hestia                             #
#----------------------------------------------------------#

# Logging
log_event "$OK" "$ARGUMENTS"

exit

