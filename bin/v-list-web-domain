#!/bin/bash
# info: list web domain parameters
# options: USER DOMAIN [FORMAT]
#
# example: v-list-web-domain admin example.com
#
# This function to obtain web domain parameters.
#
# code used in:
#
# bin/v-add-letsencrypt-host
# bin/v-add-web-domain
# bin/v-change-domain-owner
# bin/v-generate-debug-report
# bin/v-rebuild-web-domains
# bin/v-update-web-domains-disk
# install/common/api/purge-nginx-cache
# install/upgrade/manual/migrate_apache.sh
# install/upgrade/manual/migrate_multiphp.sh
# install/upgrade/manual/migrate_ngnix_apache_nginx-php-fpm.sh
# install/upgrade/versions/1.00.0-190618.sh
# install/upgrade/versions/1.1.0.sh
# test/restore.bats
# test/test.bats
# web/add/webapp/index.php
# web/add/web/index.php
# web/download/web-log/index.php
# web/edit/web/index.php
# web/inc/main.php
# web/list/web/index.php
# web/list/web-log/index.php
# web/src/app/System/HestiaApp.php
# web/src/app/WebApp/Installers/DokuWiki/DokuWikiSetup.php
# web/src/app/WebApp/Installers/Flarum/FlarumSetup.php
# web/src/app/WebApp/Installers/MediaWiki/MediaWikiSetup.php
# web/src/app/WebApp/Installers/Opencart/OpencartSetup.php
# web/src/app/WebApp/Installers/Prestashop/PrestashopSetup.php
# web/src/app/WebApp/Installers/WordPress/WordPressSetup.php

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Argument definition
user=$1
domain=$2
format=${3-shell}

# Includes
# shellcheck source=/etc/hestiacp/hestia.conf
source /etc/hestiacp/hestia.conf
# shellcheck source=/usr/local/hestia/func/main.sh
source $HESTIA/func/main.sh
# load config file
source_conf "$HESTIA/conf/hestia.conf"

# JSON list function
json_list() {
	echo '{'
	echo '    "'$DOMAIN'": {
        "IP": "'$IP'",
        "IP6": "'$IP6'",
        "DOCUMENT_ROOT": "'$DOCROOT'",
        "U_DISK": "'$U_DISK'",
        "U_BANDWIDTH": "'$U_BANDWIDTH'",
        "TPL": "'$TPL'",
        "ALIAS": "'$ALIAS'",
        "STATS": "'$STATS'",
        "STATS_USER": "'$STATS_USER'",
        "SSL": "'$SSL'",
        "SSL_FORCE": "'$SSL_FORCE'",
        "SSL_HSTS": "'$SSL_HSTS'",
        "SSL_HOME": "'$SSL_HOME'",
        "LETSENCRYPT": "'$LETSENCRYPT'",
        "FTP_USER": "'$FTP_USER'",
        "FTP_PATH": "'$FTP_PATH'",
        "AUTH_USER": "'$AUTH_USER'",
        "BACKEND": "'$BACKEND'",
        "PROXY": "'$PROXY'",
        "PROXY_EXT": "'$PROXY_EXT'",
        "FASTCGI_CACHE": "'$FASTCGI_CACHE'",
        "FASTCGI_DURATION": "'$FASTCGI_DURATION'",
        "REDIRECT": "'$REDIRECT'",
        "REDIRECT_CODE": "'$REDIRECT_CODE'",
        "CUSTOM_DOCROOT": "'$CUSTOM_DOCROOT'",
        "SUSPENDED": "'$SUSPENDED'",
        "TIME": "'$TIME'",
        "DATE": "'$DATE'"
    }'
	echo '}'
}

# SHELL list function
shell_list() {
	echo "DOMAIN:           $DOMAIN"
	echo "ALIAS:            ${ALIAS//,/ }"
	echo "IP:               $IP"
	echo "DOCUMENT_ROOT:    $DOCROOT"
	if [ -n "$IP6" ]; then
		echo "IP6:              $IP6"
	fi
	if [ -n "$SSL" ] && [ "$SSL" != 'no' ]; then
		echo "SSL:              $SSL / $SSL_HOME"
		if [ -n "$LETSENCRYPT" ] && [ "$LETSENCRYPT" != 'no' ]; then
			echo "LETSENCRYPT:      $LETSENCRYPT"
		fi
		if [ -n "$SSL_FORCE" ]; then
			echo "SSL_FORCE:        $SSL_FORCE"
		fi
		if [ -n "$SSL_HSTS" ]; then
			echo "SSL_HSTS:         $SSL_HSTS"
		fi
	fi
	echo "TEMPLATE:         $TPL"
	if [ -n "$WEB_BACKEND" ]; then
		echo "BACKEND:          $BACKEND"
	fi
	if [ -n "$PROXY_SYSTEM" ]; then
		echo "PROXY:            $PROXY"
		echo "PROXY EXT:        ${PROXY_EXT//,/ }"
	fi
	if [ -n "$STATS" ]; then
		echo "STATS:            $STATS"
	fi
	if [ "$FASTCGI_CACHE" = "yes" ]; then
		echo "FASTCGI_CACHE:    $FASTCGI_CACHE"
		echo "FASTCGI_DURATION: $FASTCGI_DURATION"
	fi
	if [ -n "$REDIRECT" ]; then
		echo "REDIRECT:         $REDIRECT"
		echo "REDIRECT_CODE:    $REDIRECT_CODE"
	fi
	if [ -n "$CUSTOM_DOCROOT" ]; then
		echo "CUSTOM_DOCROOT:   $CUSTOM_DOCROOT"
	fi
	if [ -n "$STATS_USER" ]; then
		echo "STATS_USER:       $STATS_USER"
	fi
	if [ -n "$FTP_USER" ]; then
		echo "FTP_USER:         ${FTP_USER//,/, }"
	fi
	if [ -n "$FTP_PATH" ]; then
		echo "FTP_PATH:         ${FTP_PATH}"
	fi
	if [ -n "$AUTH_USER" ]; then
		echo "HTTP_AUTH:        $AUTH_USER"
	fi
	echo "DISK:             $U_DISK"
	echo "BW:               $U_BANDWIDTH"
	echo "SUSPENDED:        $SUSPENDED"
	echo "TIME:             $TIME"
	echo "DATE:             $DATE"
}

# PLAIN list function
plain_list() {
	echo -ne "$DOMAIN\t$IP\t$IP6\t$DOCROOT\t$U_DISK\t$U_BANDWIDTH\t$TPL\t"
	echo -ne "$ALIAS\t$STATS\t$STATS_USER\t$SSL\t$SSL_FORCE\t$SSL_HSTS\t$SSL_HOME\t,$LETSENCRYPT"
	echo -ne "$FTP_USER\t$FTP_PATH\t$AUTH_USER\t$BACKEND\t$PROXY\t"
	echo -e "$PROXY_EXT\t$SUSPENDED\t$TIME\t$DATE"
}

# CSV list function
csv_list() {
	echo -n "DOMAIN,IP,IP6,DOCROOT,U_DISK,U_BANDWIDTH,TPL,ALIAS,STATS,STATS_USER,SSL,"
	echo -n "SSL_FORCE,SSL_HSTS,SSL_HOME,LETSENCRYPT,FTP_USER,FTP_PATH,AUTH_USER,BACKEND,PROXY,PROXY_EXT,"
	echo "SUSPENDED,TIME,DATE"
	echo -n "$DOMAIN,$IP,$IP6,$DOCROOT,$U_DISK,$U_BANDWIDTH,$TPL,\"$ALIAS\",$STATS"
	echo -n "\"$STATS_USER\",$SSL,$SSL_FORCE,$SSL_HSTS,$SSL_HOME,$LETSENCRYPT,\"$FTP_USER\",\"$FTP_PATH\","
	echo -n "\"$AUTH_USER\",$BACKEND,$PROXY,\"$PROXY_EXT\",$SUSPENDED,$TIME,"
	echo "$DATE"
}

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

check_args '2' "$#" 'USER DOMAIN [FORMAT]'
is_format_valid 'user' 'domain'
is_object_valid 'user' 'USER' "$user"
is_object_valid 'web' 'DOMAIN' "$domain"

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Parsing domain
parse_object_kv_list $(grep "DOMAIN='$domain'" $USER_DATA/web.conf)

if [ -n "$CUSTOM_DOCROOT" ]; then
	DOCROOT="$CUSTOM_DOCROOT"
else
	DOCROOT="$HOMEDIR/$user/web/$DOMAIN/public_html/"
fi

# Listing data
case $format in
	json) json_list ;;
	plain) plain_list ;;
	csv) csv_list ;;
	shell) shell_list ;;
esac

#----------------------------------------------------------#
#                       Hestia                             #
#----------------------------------------------------------#

exit
